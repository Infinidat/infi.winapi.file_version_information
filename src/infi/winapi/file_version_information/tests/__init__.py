
import mock
import os
import ctypes
from infi import unittest
from .. import  File, api
from pkg_resources import parse_version
from contextlib import nested, contextmanager

CMD_EXE_PATH = r"C:\Windows\System32\cmd.exe"

FILE_VERSION_INFO = \
'\x90\x03\x34\x00\x00\x00\x56\x00\x53\x00\x5f\x00' + \
'\x56\x00\x45\x00\x52\x00\x53\x00\x49\x00\x4f\x00' + \
'\x4e\x00\x5f\x00\x49\x00\x4e\x00\x46\x00\x4f\x00' + \
'\x00\x00\x00\x00\xbd\x04\xef\xfe\x00\x00\x01\x00' + \
'\x01\x00\x06\x00\x6a\x44\xb1\x1d\x01\x00\x06\x00' + \
'\x6a\x44\xb1\x1d\x3f\x00\x00\x00\x00\x00\x00\x00' + \
'\x04\x00\x04\x00\x01\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\xee\x02\x00\x00' + \
'\x01\x00\x53\x00\x74\x00\x72\x00\x69\x00\x6e\x00' + \
'\x67\x00\x46\x00\x69\x00\x6c\x00\x65\x00\x49\x00' + \
'\x6e\x00\x66\x00\x6f\x00\x00\x00\xca\x02\x00\x00' + \
'\x01\x00\x30\x00\x34\x00\x30\x00\x39\x00\x30\x00' + \
'\x34\x00\x42\x00\x30\x00\x00\x00\x4c\x00\x16\x00' + \
'\x01\x00\x43\x00\x6f\x00\x6d\x00\x70\x00\x61\x00' + \
'\x6e\x00\x79\x00\x4e\x00\x61\x00\x6d\x00\x65\x00' + \
'\x00\x00\x00\x00\x4d\x00\x69\x00\x63\x00\x72\x00' + \
'\x6f\x00\x73\x00\x6f\x00\x66\x00\x74\x00\x20\x00' + \
'\x43\x00\x6f\x00\x72\x00\x70\x00\x6f\x00\x72\x00' + \
'\x61\x00\x74\x00\x69\x00\x6f\x00\x6e\x00\x00\x00' + \
'\x5c\x00\x1a\x00\x01\x00\x46\x00\x69\x00\x6c\x00' + \
'\x65\x00\x44\x00\x65\x00\x73\x00\x63\x00\x72\x00' + \
'\x69\x00\x70\x00\x74\x00\x69\x00\x6f\x00\x6e\x00' + \
'\x00\x00\x00\x00\x57\x00\x69\x00\x6e\x00\x64\x00' + \
'\x6f\x00\x77\x00\x73\x00\x20\x00\x43\x00\x6f\x00' + \
'\x6d\x00\x6d\x00\x61\x00\x6e\x00\x64\x00\x20\x00' + \
'\x50\x00\x72\x00\x6f\x00\x63\x00\x65\x00\x73\x00' + \
'\x73\x00\x6f\x00\x72\x00\x00\x00\x72\x00\x29\x00' + \
'\x01\x00\x46\x00\x69\x00\x6c\x00\x65\x00\x56\x00' + \
'\x65\x00\x72\x00\x73\x00\x69\x00\x6f\x00\x6e\x00' + \
'\x00\x00\x00\x00\x36\x00\x2e\x00\x31\x00\x2e\x00' + \
'\x37\x00\x36\x00\x30\x00\x31\x00\x2e\x00\x31\x00' + \
'\x37\x00\x35\x00\x31\x00\x34\x00\x20\x00\x28\x00' + \
'\x77\x00\x69\x00\x6e\x00\x37\x00\x73\x00\x70\x00' + \
'\x31\x00\x5f\x00\x72\x00\x74\x00\x6d\x00\x2e\x00' + \
'\x31\x00\x30\x00\x31\x00\x31\x00\x31\x00\x39\x00' + \
'\x2d\x00\x31\x00\x38\x00\x35\x00\x30\x00\x29\x00' + \
'\x00\x00\x00\x00\x28\x00\x04\x00\x01\x00\x49\x00' + \
'\x6e\x00\x74\x00\x65\x00\x72\x00\x6e\x00\x61\x00' + \
'\x6c\x00\x4e\x00\x61\x00\x6d\x00\x65\x00\x00\x00' + \
'\x63\x00\x6d\x00\x64\x00\x00\x00\x80\x00\x2e\x00' + \
'\x01\x00\x4c\x00\x65\x00\x67\x00\x61\x00\x6c\x00' + \
'\x43\x00\x6f\x00\x70\x00\x79\x00\x72\x00\x69\x00' + \
'\x67\x00\x68\x00\x74\x00\x00\x00\xa9\x00\x20\x00' + \
'\x4d\x00\x69\x00\x63\x00\x72\x00\x6f\x00\x73\x00' + \
'\x6f\x00\x66\x00\x74\x00\x20\x00\x43\x00\x6f\x00' + \
'\x72\x00\x70\x00\x6f\x00\x72\x00\x61\x00\x74\x00' + \
'\x69\x00\x6f\x00\x6e\x00\x2e\x00\x20\x00\x41\x00' + \
'\x6c\x00\x6c\x00\x20\x00\x72\x00\x69\x00\x67\x00' + \
'\x68\x00\x74\x00\x73\x00\x20\x00\x72\x00\x65\x00' + \
'\x73\x00\x65\x00\x72\x00\x76\x00\x65\x00\x64\x00' + \
'\x2e\x00\x00\x00\x40\x00\x0c\x00\x01\x00\x4f\x00' + \
'\x72\x00\x69\x00\x67\x00\x69\x00\x6e\x00\x61\x00' + \
'\x6c\x00\x46\x00\x69\x00\x6c\x00\x65\x00\x6e\x00' + \
'\x61\x00\x6d\x00\x65\x00\x00\x00\x43\x00\x6d\x00' + \
'\x64\x00\x2e\x00\x45\x00\x78\x00\x65\x00\x2e\x00' + \
'\x4d\x00\x55\x00\x49\x00\x00\x00\x6a\x00\x25\x00' + \
'\x01\x00\x50\x00\x72\x00\x6f\x00\x64\x00\x75\x00' + \
'\x63\x00\x74\x00\x4e\x00\x61\x00\x6d\x00\x65\x00' + \
'\x00\x00\x00\x00\x4d\x00\x69\x00\x63\x00\x72\x00' + \
'\x6f\x00\x73\x00\x6f\x00\x66\x00\x74\x00\xae\x00' + \
'\x20\x00\x57\x00\x69\x00\x6e\x00\x64\x00\x6f\x00' + \
'\x77\x00\x73\x00\xae\x00\x20\x00\x4f\x00\x70\x00' + \
'\x65\x00\x72\x00\x61\x00\x74\x00\x69\x00\x6e\x00' + \
'\x67\x00\x20\x00\x53\x00\x79\x00\x73\x00\x74\x00' + \
'\x65\x00\x6d\x00\x00\x00\x00\x00\x42\x00\x0f\x00' + \
'\x01\x00\x50\x00\x72\x00\x6f\x00\x64\x00\x75\x00' + \
'\x63\x00\x74\x00\x56\x00\x65\x00\x72\x00\x73\x00' + \
'\x69\x00\x6f\x00\x6e\x00\x00\x00\x36\x00\x2e\x00' + \
'\x31\x00\x2e\x00\x37\x00\x36\x00\x30\x00\x31\x00' + \
'\x2e\x00\x31\x00\x37\x00\x35\x00\x31\x00\x34\x00' + \
'\x00\x00\x00\x00\x44\x00\x00\x00\x01\x00\x56\x00' + \
'\x61\x00\x72\x00\x46\x00\x69\x00\x6c\x00\x65\x00' + \
'\x49\x00\x6e\x00\x66\x00\x6f\x00\x00\x00\x00\x00' + \
'\x24\x00\x04\x00\x00\x00\x54\x00\x72\x00\x61\x00' + \
'\x6e\x00\x73\x00\x6c\x00\x61\x00\x74\x00\x69\x00' + \
'\x6f\x00\x6e\x00\x00\x00\x00\x00\x09\x04\xb0\x04' + \
'\x46\x45\x32\x58\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
'\x00\x00\x00\x00'

class FileTestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        super(FileTestCase, cls).setUpClass()
        if os.name != 'nt':
            raise unittest.SkipTest("This test can run only on Windows")

    def test_version_of_cmd_exe(self):
        cmd_exe = File(CMD_EXE_PATH)
        version = cmd_exe.get_version()
        self.assertGreater(parse_version(version), parse_version('1.0'))

class MockFileTestCase(FileTestCase):
    @classmethod
    def setUpClass(cls):
        with mock.patch.object(os, "name", new='nt'):
            super(MockFileTestCase, cls).setUpClass()

    def _patch_exists(self, path):
        self.assertEqual(path, CMD_EXE_PATH)
        return True

    def _patch_GetFileVersionInfoSizeW(self, filepath):
        self.assertEqual(filepath.value, CMD_EXE_PATH)
        return 1828

    def _patch_GetFileVersionInfoW(self, filepath, handle, length, data):
        self.assertEqual(filepath.value, CMD_EXE_PATH)
        self.assertEqual(handle.value, 0)
        self.assertEqual(length.value, 1828)
        data.raw = FILE_VERSION_INFO
        return 1

    def _patch_VerQueryValueW(self, block, sub_block, buffer, length):
        self.assertEqual(block.raw, FILE_VERSION_INFO[:1828])
        pass

    def test_version_of_cmd_exe(self):
        with nested(mock.patch.object(os.path, "exists", self._patch_exists),
                    mock.patch.object(api, "GetFileVersionInfoSizeW", self._patch_GetFileVersionInfoSizeW),
                    mock.patch.object(api, "GetFileVersionInfoW", self._patch_GetFileVersionInfoW),
                    mock.patch.object(api, "VerQueryValueW", self._patch_VerQueryValueW),):
            super(MockFileTestCase, self).test_version_of_cmd_exe()

